// Importing necessary modules
const express = require('express');
const bodyParser = require('body-parser');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cors = require('cors');

// Initializing express app
const app = express();
app.use(bodyParser.json());
app.use(cors());

// Database connection and model
const mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/EnergyMarketplace', {useNewUrlParser: true});
const User = mongoose.model('User', {
  email: {
    type: String,
    unique: true,
    required: true,
    lowercase: true
  },
  password: {
    type: String,
    required: true
  },
  role: {
    type: String,
    required: true
  }
});
const Bid = mongoose.model('Bid', {
  seller: {
    type: String,
    required: true
  },
  buyer: {
    type: String,
    required: true
  },
  credits: {
    type: Number,
    required: true
  },
  price: {
    type: Number,
    required: true
  }
});
const Credit = mongoose.model('Credit', {
  seller: {
    type: String,
    required: true
  },
  credits: {
    type: Number,
    required: true
  },
  price: {
    type: Number,
    required: true
  }
});
const Energy = mongoose.model('Energy', {
  seller: {
    type: String,
    required: true
  },
  energy: {
    type: Number,
    required: true
  },
  price: {
    type: Number,
    required: true
  }
});
const Certificate = mongoose.model('Certificate', {
  seller: {
    type: String,
    required: true
  },
  certificates: {
    type: Number,
    required: true
  },
  price: {
    type: Number,
    required: true
  }
});

// User signup route
app.post('/signup', (req, res) => {
  const userData = req.body;
  const user = new User(userData);
  user.save((err, savedUser) => {
    if (err) return res.status(500).send({message: 'Error signing up user'});
    return res.status(200).send({message: 'User signup successful'});
  });
});

// User login route
app.post('/login', (req, res) => {
  User.findOne({email: req.body.email}, (err, user) => {
    if (err) return res.status(500).send({message: 'Error logging in user'});
    if (!user) return res.status(404).send({message: 'User not found'});
    const passwordMatch = bcrypt.compare

